#!/usr/bin/env bash
#
# bootstrap installs things.
set -e

# Defaults block
skip_gitconfig=
skip_all=
overwrite_all=
backup_all=

parse_args() {
  for arg in "$@"; do
    case "$arg" in
      --no-gitconfig)
        skip_gitconfig=true
        ;;
      --skip-all)
        skip_all=true
        ;;
      --overwrite-all)
        overwrite_all=true
        ;;
      --backup-all)
        backup_all=true
        ;;
      *)
        ;;
    esac
  done
}

SCRIPT_NAME=$0
SCRIPT_BASENAME=$(basename $0)
SCRIPT_DIR=$(cd "$(dirname $SCRIPT_NAME)"; pwd)
DOTFILES_ROOT=$(cd "$SCRIPT_DIR/.."; pwd)

pushd "$DOTFILES_ROOT" > /dev/null
  if [ -L "$SCRIPT_DIR" ]; then
    # "pwd -P" would follow *all* symlinks
    printf "\r  [ \033[00;34m..\033[0m ] $SCRIPT_DIR is a symlink, going down...\n"
    LINKED_SCRIPT_DIR=$(cd $(readlink $SCRIPT_DIR); pwd)
    $(readlink $SCRIPT_DIR)/$SCRIPT_BASENAME "$@"
  fi
popd > /dev/null

echo ''
printf "\r  [ \033[00;34m..\033[0m ] Bootstrapping $DOTFILES_ROOT...\n"
cd "$DOTFILES_ROOT"

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_gitconfig () {
  if [ ! -e "$HOME/.gitconfig.local" ]; then
    if ! [ -f git/gitconfig.local.symlink ]
    then
      info 'setup gitconfig'

      git_credential='cache'
      if [ "$(uname -s)" == "Darwin" ]
      then
        git_credential='osxkeychain'
      fi

      user ' - What is your github author name?'
      read -e git_authorname
      user ' - What is your github author email?'
      read -e git_authoremail

      sed -e "s/AUTHORNAME/$git_authorname/g" -e "s/AUTHOREMAIL/$git_authoremail/g" -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g" git/gitconfig.local.symlink.example > git/gitconfig.local.symlink

      success 'gitconfig'
    fi
  fi
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" == "$src" ]
      then

        skip=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" == "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" == "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" == "true" ]
    then
      success "skipped $src"
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  #local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 3 -name '*.symlink' -not -path '*/.git/*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

install_config_files () {
  info 'installing .config files'
  if [ ! -e "$HOME/.config" ]; then
    mkdir "$HOME/.config"
  fi

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT/config" -mindepth 1 -maxdepth 1 -not -path '*/.git/*')
  do
    dst="$HOME/.config/$(basename "$src")"
    link_file "$src" "$dst"
  done
}

init_submodules() {
  # TODO: Check for "-" at the beginning of "git submodule status" results
  git submodule update --init --recursive || true
}

parse_args "$@"
# TODO: Init submodules *before* jumping through symlinks
init_submodules
if [ "$skip_gitconfig" != "true" ]
then
  setup_gitconfig
fi
install_dotfiles
install_config_files

echo ''
echo '  All installed!'
